#=================================================
# Description: Build OpenWrt using GitHub Actions
#
# Lisence: MIT
#
# Author: Jardy
#=================================================

name: X86_64_openwrt

on:      
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false 
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x86_64.config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex node-uglify git gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 下载Lede源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
   
    - name: 第三方插件
      working-directory: ./openwrt
      run: |
        git clone https://github.com/fw876/helloworld.git package/ssrp
        git clone https://github.com/kiddin9/luci-theme-edge.git package/luci-theme-edge
        
    - name: 升级 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
     
    #- name: 更换banner
    # run: |
    #    cd openwrt/package/base-files/files/etc
    #    sudo rm banner
    #    wget https://github.com/jardy129/jardy_OpenWrt/blob/bf55a7e568e6d79d1b1bfea94e139130c0d799b9/banner   

    - name: 自定义config
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
            
    #- name: SSH连接
    #  uses: P3TERX/ssh2actions@v1.0.0
    #  if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    # env:
    #    TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #    TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}     
        
    - name: 预下载DL库
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 正式编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile."
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date "+%y.%m.%d-%H.%M")" >> $GITHUB_ENV
   
    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    #- name: 上传bin目录
    #  uses: actions/upload-artifact@main
    #  if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    #  with:
    #    name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #    path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*feeds.buildinfo*" | xargs -i mv -f {} packages
        find -name "*version.buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*.bin*" | xargs -i mv -f {} packages
        find -name "*.vmdk*" | xargs -i mv -f {} packages
        find -name "*rootfs.img*" | xargs -i mv -f {} packages
        find -name "*tar.gz*" | xargs -i mv -f {} packages 
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: 打包上传
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    #- name: 将固件上传到cowtransfer
    #  id: cowtransfer
    #  if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
    #    echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    #    echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        
    - name: 将固件上传到WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        
    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H.%M")"
        echo -e "🎈此固件是基于Lean大源码编译，仅适用于支持EFI的X86_64平台！！！\n" >> release.txt
        echo -e "🚀墙内外加速下载:\n" >> release.txt
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🚀 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🚀 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
    - name: 上传固件release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除工作流运行
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    #- name: 删除旧版本
    #  uses: dev-drprasad/delete-older-releases@v0.1.0
    #  if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    # with:
    #  keep_latest: 3
    #   delete_tags: true
    #  env:
    #   REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    
        

               
